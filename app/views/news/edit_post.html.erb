<h3><%= @task.to_s %> <%= @post_type_header.to_s %></h3>

<%= form_with url: post_submit_url, remote:false, local: true, html: { autocomplete: "off" } do |form| %>
    <%= form.hidden_field :weekly_id, value: @weekly_id %>
    <%= form.hidden_field :post_id, value: @post_id %>
    <%= form.hidden_field :post_type, value: @post_type %>

    <div class="field">
        <%= form.label :slack_url %>
        <%= form.text_field :slack_url, value: @slack_url %>
    </div>

    <div class="field">
        <%= form.label :post_date %>
        <%= form.date_field :post_date, value: @post_date %>
    </div>

    <div class="field autocomplete" style="width: 100%;">
        <%= form.label :user %>
        <%= form.text_field :user, value: @user, style: "margin-bottom: 0px;" %>
    </div>
    <div style="clear: both;"></div>

    <div class="field">
        <%= form.label :title %>
        <%= form.text_field :title, value: @title %>
    </div>

    <div class="field">
        <%= form.label :url %>
        <%= form.text_field :url, value: @url %>
    </div>

    <div class="field">
        <%= form.label :description %>
        <%= form.text_area :description, value: @description %>
    </div>

    <div class="field">
        <%= form.label :lang, "Language specific (leave empty to display always)" %>
        <%= form.select :lang, options_for_select([["", ""],["English", "en"],["German", "de"],["Hungarian", "hu"],["Japanese", "jp"],["Korean", "ko"],["Taiwanese", "tw"]], @lang.to_s) %>
    </div>

    <%= form.button value: "save", class: "btn btn-success" do %>
        <i class="fa fa-floppy-o" aria-hidden="true"></i>
        Save
    <% end %>

    <%  if @post_id.to_s != "" %>
            <%= form.button value: "delete", class: "btn btn-danger" do %>
                <i class="fa fa-trash-o" aria-hidden="true"></i>
                Delete
            <% end
        end %>

    <%= form.button value: "cancel", class: "btn btn-default" do %>
        Cancel
    <% end %>
<% end %>

<script type="text/javascript">
	var user_names = <%= User.pluck(:name).to_json.html_safe %>;

	function autocomplete(inp, arr) {
    /*the autocomplete function takes two arguments,
    the text field element and an array of possible autocompleted values:*/
    var currentFocus;
    /*execute a function when someone writes in the text field:*/
    inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
              b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
    });
    /*execute a function presses a key on the keyboard:*/
    inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
    });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
        x[i].parentNode.removeChild(x[i]);
      }
    }
  }
  /*execute a function when someone clicks in the document:*/
  document.addEventListener("click", function (e) {
      closeAllLists(e.target);
  });
} 
autocomplete(document.getElementById("user"), user_names);
</script>